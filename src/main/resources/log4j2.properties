# 建立名称为 console 和 file 的两个 appender

name=PropertiesConfig
appenders = console, rolling
# 输出路径是 ${filename}
property.filename = target/logs/log.log

filters = threshold
 
filter.threshold.type = ThresholdFilter
filter.threshold.level = debug

# 设置两个 appender 的参数，其中 name 是用于之后的 ref 的

# 首先是 console appender
appender.console.type = Console
appender.console.name = STDOUT
appender.console.layout.type = PatternLayout
appender.console.layout.pattern = target/logs/archive/[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %c{1} - %msg%n

# 采用RollingFile类型的Appender
appender.rolling.type = RollingFile
# 本appender的名字，以便在Logger的配置项中能够调用
appender.rolling.name = RollingFile
# 当前正在操作的日志文件的文件名
appender.rolling.fileName = ${filename}
# 归档后的日志文件的文件名格式，其中`%d{yyyy-MM-dd-HH}`用来自动填充日期
appender.rolling.filePattern = debug-backup-%d{yyyy-MM-dd HH:mm:ss}-%i.log.gz
appender.rolling.layout.type = PatternLayout
# 对应输出的每条日志的日志头
appender.rolling.layout.pattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
# 基于时间进行日志的切割
appender.rolling.policies.type = Policies
appender.rolling.policies.time.type = TimeBasedTriggeringPolicy
# 切割的间隔为1小时, 即每小时进行一次日志的归档
appender.rolling.policies.time.interval = 1
# 修正时间范围, 从0时开始计数
appender.rolling.policies.time.modulate = true
appender.rolling.policies.size.type = SizeBasedTriggeringPolicy
appender.rolling.policies.size.size=10MB
appender.rolling.strategy.type = DefaultRolloverStrategy
appender.rolling.strategy.max = 20

# 设置 rootLogger 的记录级别，将 console 和 file 绑定到 rootLogger 上。
rootLogger.level = debug
rootLogger.appenderRef.stdout.ref = STDOUT
rootLogger.appenderRef.rolling.ref = RollingFile